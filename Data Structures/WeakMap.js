/*WeakMap – особый вид Map, не препятствующий сборщику мусора удалять свои элементы. 
То есть, если некий объект присутствует только в WeakMap – он удаляется из памяти.
WeakMap работает только на запись (set, delete) и чтение (get, has) элементов по конкретному ключу
У WeakMap есть ряд ограничений:
    -Только объекты в качестве ключей.
    -Нет свойства size.
    -Нельзя перебрать элементы итератором или forEach.
    -Нет метода clear().
Это нужно для тех ситуаций, когда основное место для хранения и использования объектов находится где-то 
в другом месте кода, а здесь мы хотим хранить для них «вспомогательные» данные, существующие лишь пока жив объект.
Таким образом, WeakMap избавляет нас от необходимости вручную удалять вспомогательные данные, когда удалён основной объект.*/

// ====Пример====

// текущие активные пользователи
let activeUsers = [
    {name: "Вася"},
    {name: "Петя"},
    {name: "Маша"}
  ];
  
  // вспомогательная информация о них,
  // которая напрямую не входит в объект юзера,
  // и потому хранится отдельно
  let weakMap = new WeakMap();
  
  weakMap.set(activeUsers[0], 1);
  weakMap.set(activeUsers[1], 2);
  weakMap.set(activeUsers[2], 3);
  // weakMap.set('Katya', 4); Будет ошибка TypeError: "Katya" is not a non-null object
  
  console.log( weakMap.get(activeUsers[0]) ); // 1
  
  activeUsers.splice(0, 1); // Вася более не активный пользователь
  
  // weakMap теперь содержит только 2 элемента
  
  activeUsers.splice(0, 1); // Петя более не активный пользователь
  
  // weakMap теперь содержит только 1 элемент

